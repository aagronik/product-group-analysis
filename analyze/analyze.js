///<reference path="listTable.js" />

const supplierDataRowIndex = 2;
const emptyCategorySymbol = "‚Ü¥";
const analyzedSymbol = "üî¨";

const testRunAnalyze = () => {
  const res = runAnalyze(true);
  console.log(res);
};

const getSuppliers = () => {
  return getApiPoint("https://offers-moder-api.tkr.dev/api/catalog/suppliers");
};

const postAnalyze = (data, makerId, modelId, supplierId) => {
  return getApiPoint(
    `https://offers-moder-api.tkr.dev/api/priceAnalyzer/analyzeFromComparisonTree?makerId=${makerId}&modelId=${modelId}&supplierId=${supplierId}`,
    "post",
    data
  );
};

const getSupplierIdStoreKey = (sheetName) => `${sheetName}_supplierId`;
const storeSupplierId = (id) => {
  const sheetName = SpreadsheetApp.getActiveSpreadsheet()
    .getActiveSheet()
    .getName();

  setDocProps(getSupplierIdStoreKey(sheetName), id);
};

const getStoredSupplierId = () => {
  const sheetName = SpreadsheetApp.getActiveSpreadsheet()
    .getActiveSheet()
    .getName();

  return getDocProps(getSupplierIdStoreKey(sheetName)) || "";
};
/**
 * Validate the tree structure
 * @param {Array} tree - The tree structure to validate. Result of getActiveTable() function.
 * @returns {Array} - An array of errors
 */
const validateTree = (tree) => {
  const errors = [];

  const validateNode = ({
    type,
    partNumber,
    rowIndex,
    name,
    props = [],
    subs,
  }) => {
    if (type === "Part") {
      if (!partNumber) {
        errors.push({
          rowIndex,
          error: "Part number –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω",
          name,
        });
      }
      const priceProp = props.find(({ name }) => name === "–¶–µ–Ω–∞");
      if (!priceProp || !priceProp.value) {
        errors.push({ rowIndex, name, error: "–¶–µ–Ω–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" });
      }

      const currencyProp = props.find(({ name }) => name === "–í–∞–ª—é—Ç–∞");
      if (!currencyProp || !currencyProp.value) {
        errors.push({ rowIndex, name, error: "–í–∞–ª—é—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" });
      }
    }

    if (subs) {
      for (const subNode of subs) {
        validateNode(subNode);
      }
    }
  };

  for (const node of tree) {
    validateNode(node);
  }

  return errors;
};

/**
 * Exclude errors from the tree
 * @param {Array} tree - The tree structure to exclude errors from. Result of getActiveTable() function.
 * @param {Array} errors - The errors to exclude from the tree. Result of validateTree() function.
 * @returns {Array} - A new tree structure with errors excluded
 */
const excludeErrors = (tree, errors) => {
  const newTree = [];
  for (const node of tree) {
    if (errors.some(({ rowIndex }) => rowIndex === node.rowIndex)) continue;
    newTree.push(node);
    if (node.subs) {
      node.subs = excludeErrors(node.subs, errors);
    }
  }
  return newTree;
};

/**
 * Run the analyze. Runs on "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" button click.
 * @param {boolean} noErrors - Whether to exclude errors from the tree
 * @returns {Promise} - A promise that resolves to the result of the analyze
 */
const runAnalyze = async (noErrors = false) => {
  const treeData = getActiveTable(true);
  const req = {
    settings: getCustomParams(),
    rows: treeData,
  };

  const { makerId, modelId } = getStoredSheetSettings();
  const supplierId = getStoredSupplierId();
  const errors = validateTree(treeData);

  if (!noErrors) {
    if (errors.length > 0) {
      return { error: "–ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –¥–µ—Ä–µ–≤–µ", errors };
    }
  } else {
    req.rows = excludeErrors(treeData, errors);
  }

  const res = await postAnalyze(req, makerId, modelId, supplierId);
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const { start: headerRowIndex } = getTableInfoData(sheet.getName());
  if (res.supplier) {
    fillRowProps(res.supplier, headerRowIndex, sheet, supplierDataRowIndex);
    mergeAndFixCats(sheet, headerRowIndex);
  }
  fillAnalyzedProps(req.rows, res.rows, headerRowIndex, sheet);
};

const fillAnalyzedProps = (data, analyzed, headerRowIndex, sheet) => {
  for (const row of data) {
    const { rowIndex, name, subs } = row;
    const analyzedRow = analyzed.find((x) => name === x.name);
    if (analyzedRow) {
      fillRowProps(analyzedRow, headerRowIndex, sheet, rowIndex);
      if (analyzedRow.subs && subs) {
        fillAnalyzedProps(subs, analyzedRow.subs, headerRowIndex, sheet);
      }
    }
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} headerRowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @returns {Array} - [firstHeaderRow, secondHeaderRow] –î–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 */
const getHeaderRows = (sheet, headerRowIndex) => {
  return sheet
    .getRange(headerRowIndex, 1, 2, sheet.getLastColumn())
    .getValues();
};

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ
 * @param {{ props: { name: string, value: string }[], rowIndex: number }} row - –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} headerRowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} rowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∏—Å—Ç–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
const fillRowProps = ({ props }, headerRowIndex, sheet, rowIndex) => {
  //–ò–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  const firstHeaderRowIndex = headerRowIndex;
  const secondHeaderRowIndex = headerRowIndex + 1;

  //–ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤, —Ç–æ –≤—ã—Ö–æ–¥–∏–º
  if(!props || props.length === 0) return;

  for (let prop of props) {
    //–°—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    let [firstHeaderRow, secondHeaderRow] = getHeaderRows(
      sheet,
      headerRowIndex
    );

    //–ù–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤. –ù–∞–ø—Ä–∏–º–µ—Ä ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ó–Ω–∞—á–µ–Ω–∏–µ1'] –∏–∑ '–ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ó–Ω–∞—á–µ–Ω–∏–µ1'
    const propNames = prop.name.split("|");
    if (propNames.length === 2) {
      const firstPropName = propNames[0];
      //–ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      let catColIndex = headerIndex(firstHeaderRow, firstPropName);
      if (catColIndex === -1) {
        //–ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞
        catColIndex = sheet.getLastColumn();
        sheet.insertColumnAfter(catColIndex);
        sheet
          .getRange(firstHeaderRowIndex, catColIndex + 1)
          .setValue(firstPropName);
        //–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        [firstHeaderRow, secondHeaderRow] = getHeaderRows(
          sheet,
          headerRowIndex
        );
      }
      const secondPropName = propNames[1]; //–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
      const secondPropNameCat = formCatName(secondPropName); //–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞. –° —Å–∏–º–≤–æ–ª–æ–º üî¨

      let secondCatColIndex = catColIndex;
      let found = false;
      if (!found) {
        for (let i = secondCatColIndex; i < secondHeaderRow.length; i++) {
          let propNameCat = secondHeaderRow[i];
          //–ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è, —Ç–æ —Å—á–∏—Ç–∞–µ–º –µ–µ –Ω–∞–π–¥–µ–Ω–æ–π.
          if (!propNameCat) {
            found = true;
            break;
          }
          //–ï—Å–ª–∏ –Ω–∞—à–ª–∏, —Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          if (propNameCat === secondPropNameCat) {
            secondCatColIndex = i;
            found = true;
            break;
          }
          //–ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—É—Å—Ç–æ –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          if (firstHeaderRow[i] === "" && i !== secondCatColIndex) {
            break;
          }
        }
      }

      if (!found) {
        sheet.insertColumnAfter(secondCatColIndex + 1);
        secondCatColIndex++;
      }
      //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
      sheet
        .getRange(secondHeaderRowIndex, secondCatColIndex + 1)
        .setValue(secondPropNameCat);

      //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
      sheet.getRange(rowIndex, secondCatColIndex + 1).setValue(prop.value);
    } else if (propNames.length === 1) {
      let propNameCat = formCatName(propNames[0]); //–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞. –° —Å–∏–º–≤–æ–ª–æ–º üî¨

      //–í–∞–∂–Ω–æ. –ü–æ–∏—Å–∫ –ø–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞.
      //–ë–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
      let propColIndex = headerIndex(secondHeaderRow, propNameCat);

      if (propColIndex === -1) {
        propColIndex = sheet.getLastColumn();
        sheet.insertColumnAfter(propColIndex);
        sheet
          .getRange(secondHeaderRowIndex, propColIndex + 1)
          .setValue(propNameCat);
        sheet
          .getRange(firstHeaderRowIndex, propColIndex + 1)
          .setValue(emptyCategorySymbol);
      }
      sheet.getRange(rowIndex, propColIndex + 1).setValue(prop.value);
    }
  }
};

/**
 * –û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ç —Å–∏–º–≤–æ–ª–∞ üî¨
 * @param {string} catName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
 * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ üî¨
 */
const clearCatName = (catName) => {
  return catName.replace(analyzedSymbol, "").trim();
};

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å —Å–∏–º–≤–æ–ª–æ–º üî¨
 * @param {string} catName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
 * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å —Å–∏–º–≤–æ–ª–æ–º üî¨
 */
const formCatName = (catName) => {
  return `${catName} ${analyzedSymbol}`;
};
/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª üî¨ –≤ –∫–æ–Ω–µ—Ü –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞.
 * –ü–æ—Å–ª–µ —á–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞.
 * –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª —ç—Ç–æ—Ç –∫–æ–¥ –∏ –ø–æ–Ω—è–ª, —á—Ç–æ —Å–∞–º –µ–≥–æ —Å —Ç—Ä—É–¥–æ–º —á–∏—Ç–∞—é. –î–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. @aagronik
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} headerRowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 */
const mergeAndFixCats = (sheet, headerRowIndex) => {
  const firstHeaderRowIndex = headerRowIndex;
  let [firstHeaderRow, secondHeaderRow] = getHeaderRows(
    sheet,
    firstHeaderRowIndex
  );

  let mergeStartIndex = 0;
  let mergeLength = 0;
  // –ú–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
  const toFix = [];
  for (let i = 0; i < firstHeaderRow.length; i++) {
    const catName = clearCatName(firstHeaderRow[i]);
    // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if (catName) {
      if (mergeLength > 0 && mergeStartIndex > 0) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        sheet
          .getRange(
            firstHeaderRowIndex,
            mergeStartIndex + 1,
            1,
            mergeLength + 1
          )
          .merge();
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–æ–∑–æ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        toFix.push({ start: mergeStartIndex + 1, length: mergeLength + 1 });
      } else {
        // –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –ø—É—Å—Ç–∞. (emptyCategorySymbol), –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–∞–∫ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É
        toFix.push({ start: mergeStartIndex + 1, length: 1 });
      }
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      mergeLength = 0;
      mergeStartIndex = i;
    } else {
      mergeLength++;
    }
    if (i === firstHeaderRow.length - 1) {
      if (mergeLength > 0) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        sheet
          .getRange(
            firstHeaderRowIndex,
            mergeStartIndex + 1,
            1,
            mergeLength + 1
          )
          .merge();
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–æ–∑–æ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      toFix.push({ start: mergeStartIndex + 1, length: mergeLength + 1 });
    }
  }

  [firstHeaderRow, secondHeaderRow] = getHeaderRows(sheet, firstHeaderRowIndex);

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–∏–∞–ø–æ–∑–æ–Ω–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã
  for (const { start, length } of toFix) {
    const colWidth =
      length > 1 //–ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–æ–ª—å—à–µ 1, —Ç–æ –±–µ—Ä–µ–º —à–∏—Ä–∏–Ω—É –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        ? firstHeaderRow[start - 1].length * 9
        : secondHeaderRow[start - 1].length * 9; //–ü—Ä–∏–Ω–∏–º–∞–µ–º —à–∏—Ä–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∑–∞ 9px
    for (let i = start; i < start + length; i++) {
      sheet.setColumnWidth(i, Math.round(colWidth / length));
    }
  }
};
